@use "sass:math";
@use "../abstracts/" as *;

.form-group {
  position: relative;
}

label {
  font-size: 14px;
  font-weight: 500;
  line-height: 18px;
}

.form-control {
  height: auto;
  font-size: 15px;
  line-height: 20px;

  &::-webkit-input-placeholder {
    font-weight: 400;
  }

  &::-moz-placeholder {
    font-weight: 400;
  }

  &:-ms-input-placeholder {
    font-weight: 400;
  }

  &:-moz-placeholder {
    font-weight: 400;
  }
}

// Input with icon
.input-group.input-group-icon {
  display: flex;
  flex-direction: row-reverse;

  .input-group-prepend {
    > .input-group-text {
      padding-right: 0;
      border-right: none;
      border-radius: $border-radius 0 0 $border-radius;

      svg {
        width: 20px;
        height: 20px;
        fill: $emerald;
      }
    }
  }

  > .form-control {
    border-left: none;
    border-radius: 0 $border-radius $border-radius 0;

    &:focus + .input-group-prepend .input-group-text {
      border-color: $gray-dark;
    }
  }
}

// Input two lines

.form-group-twoline,
.form-group-twoline .input-group {
  position: relative;

  > input,
  > textarea,
  > select {
    background-clip: padding-box;

    &.form-control {
      .was-validated &:invalid,
      &.is-invalid {
        & ~ label {
          color: $danger;
        }
      }

      & ~ label {
        position: absolute;
        top: 1px;
        right: 20px;
        left: 20px;
        height: 48px;
        margin: 0;
        padding-top: 14px;
        transition: .3s;
        background-color: $white;
        color: $gray;
        font-size: 15px;
        font-weight: 400;
        line-height: 20px;
        overflow: hidden;
        z-index: 5;
        pointer-events: none;
      }

      &:focus,
      &.has-val {
        padding-top: 21.5px;
        padding-bottom: 6.5px;

        & ~ label {
          height: 20px;
          padding-top: 5px;
          font-size: 12px;
          line-height: 15px;
          text-overflow: ellipsis;
          white-space: nowrap;
        }
      }
    }

    &.form-control-icon {
      & ~ label {
        left: 60px;
      }
    }
  }

  > select {
    &.form-control {
      & ~ label {
        right: 40px;
      }
    }
  }

  > textarea {
    &.form-control {
      & ~ label {
        height: calc(100% - 14px);
      }
    }
  }
}

Validation
.form-control,
.custom-select {
  .was-validated &:invalid,
  &.is-invalid {
    background-image: none;

    &::-webkit-input-placeholder {
      color: $danger;
    }

    &::-moz-placeholder {
      color: $danger;
    }

    &:-ms-input-placeholder {
      color: $danger;
    }

    &:-moz-placeholder {
      color: $danger;
    }

    & ~ .invalid-feedback {
      display: flex;
      align-items: center;
      margin-top: 10px;
      font-size: 12px;
      font-weight: 500;
      line-height: 14px;

      .icon {
        display: block;
        width: 14px;
        height: 14px;
        margin-right: 5px;
        color: $danger;
        fill: currentColor;
      }
    }
  }
}

.invalid-tooltip {
  width: 100%;
  margin-top: 12px;
  padding: 15px 25px;
  border-radius: 2px;
  background-color: $danger;
  color: $gray-light;
  font-size: 12px;
  font-weight: 500;
  line-height: 20px;
  box-shadow: 0 2px 8px 0 rgba($black, .2);

  &::before {
    content: '';
    display: block;
    position: absolute;
    top: -7px;
    left: 50%;
    width: 16px;
    height: 16px;
    transform: translateX(-50%) rotate(45deg);
    border-radius: 2px;
    background-color: $danger;
  }
}

select {
  &.form-control {
    padding-right: 40px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 57.8 32"><path fill="rgb(166,166,187)" d="M3.1 0l25.8 25.8L54.7 0l3.1 3.1-27.3 27.4-1.6 1.5-1.6-1.5L0 3.1 3.1 0z"/></svg>');
    background-repeat: no-repeat;
    background-position: right 20px center;
    background-size: 17px 9px;
    -moz-appearance: none;
    -webkit-appearance: none;

    &:not([size]):not([multiple]) {
      height: 3.125rem;
    }

    .was-validated &:invalid,
    &.is-invalid {
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 57.8 32"><path fill="rgb(166,166,187)" d="M3.1 0l25.8 25.8L54.7 0l3.1 3.1-27.3 27.4-1.6 1.5-1.6-1.5L0 3.1 3.1 0z"/></svg>');
      background-position: right 20px center;
      background-size: 17px 9px;
    }
  }
}

input[required] {
  padding-right: calc(#{$btn-padding-x} + 20px);
}

input[type='text'],
input[type='email'] {
  & ~ .feedback {
    position: absolute;
    top: 50%;
    right: 15px;
    width: 16px;
    height: 16px;
    margin-top: -8px;

    .icon {
      display: block;
      width: 16px;
      height: 16px;
      color: inherit;
      fill: currentColor;
    }
  }
}

.form-quantity {
  display: flex;

  button.btn-sm {
    width: 24px;
    height: 24px;
    padding: .0625rem;
  }

  button.btn-lg {
    width: 44px;
    height: 44px;
    padding: .6875rem;

    &.btn-down {
      margin-right: -1px;
    }

    &.btn-up {
      margin-left: -1px;
    }
  }

  .btn-up,
  .btn-down {
    position: relative;

    &::before {
      position: absolute;
      left: 50%;
      width: 12px;
      height: 1px;
      transform: translateX(-50%);
      background-color: $gray;
      content: '';
    }

    &.disabled {
      background: rgba($gray, .5);
      pointer-events: none;
    }
  }

  .btn-up {
    &::after {
      position: absolute;
      bottom: 50%;
      width: 1px;
      height: 12px;
      transform: translateY(50%);
      background-color: $gray;
      content: '';
    }
  }

  .form-control-sm {
    width: 38px;
    padding: .0625rem;
    border: none;
    text-align: center;
  }

  .form-control-lg {
    width: 58px;
    padding: .6875rem;
    border-right: none;
    border-left: none;
    border-radius: 0;
    text-align: center;
  }
}

.was-validated .form-check-input:invalid ~ .form-check-label,
.was-validated .form-check-input:valid ~ .form-check-label,
.form-check-input.is-invalid ~ .form-check-label,
.form-check-input.is-valid ~ .form-check-label {
  color: inherit;
}

.feedback {
  font-size: 100%;
  font-weight: 700;

  &.valid-feedback {
    color: $success;
  }

  &.invalid-feedback {
    color: $danger;
  }
}

$check-gutter: .625rem;
$check-disabled-opacity: .5;

$CustomCheckBox-size: 1.125rem;
$CustomCheckBox-border-width: 1px;
$CustomCheckBox-border-radius: 4px;
$CustomCheckBox-icon-size-x: .75rem;
$CustomCheckBox-icon-size-y: .375rem;

$radio-size: 1.25rem;
$radio-border-width: 1px;
$radio-icon-size: .5rem;

.CustomCheckBox--custom,
.CustomCheckBox--toggle,
.radio--custom,
.radio--toggle {
  display: block;
  position: relative;

  label {
    display: flex;
    line-height: 20px;
  }

  input[type='CustomCheckBox'],
  input[type='radio'] {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    opacity: 0;
    visibility: hidden;

    &:disabled,
    &.disabled {
      & + span {
        &::before,
        &::after {
          opacity: $check-disabled-opacity;
        }
      }
    }
  }
}

.CustomCheckBox--custom,
.radio--custom {
  input[type='CustomCheckBox'],
  input[type='radio'] {
    &:checked {
      & + span {
        &::before {
          border-color: $tertiary;
          background-color: $tertiary;
        }

        &::after {
          opacity: 1;
          visibility: visible;
        }
      }
    }

    & + span {
      display: block;
      position: relative;

      &::before,
      &::after {
        position: absolute;
        transition: .15s ease-in-out;
        content: '';
      }

      &::before {
        border: 1px solid $primary;
      }

      &::after {
        opacity: 0;
        visibility: hidden;
      }
    }
  }
}

.CustomCheckBox--custom {
  &.CustomCheckBox--custom-light {
    input[type='CustomCheckBox']:checked {
      & ~ span {
        color: $white;
      }
    }

    .CustomCheckBox__icon {
      &::before {
        border: none;
        background: $white;
      }
    }

    span {
      color: rgba($white, .7);
      font-weight: 600;
    }
  }

  input[type='CustomCheckBox'] {
    & + span {
      flex: 0 0 $CustomCheckBox-size;
      width: $CustomCheckBox-size;
      height: $CustomCheckBox-size;
      margin-right: $check-gutter;

      &::before {
        top: math.div((12 * 20) - $CustomCheckBox-size, 2);
        left: 0;
        width: $CustomCheckBox-size;
        height: $CustomCheckBox-size;
        border-radius: $CustomCheckBox-border-radius;
      }

      &::after {
        top: math.div((12 * 20) - $CustomCheckBox-size, 2) + math.div($CustomCheckBox-size - $CustomCheckBox-icon-size-y, 2) - .0625rem;
        left: math.div($CustomCheckBox-size - $CustomCheckBox-icon-size-x, 2);
        width: $CustomCheckBox-icon-size-x;
        height: $CustomCheckBox-icon-size-y;
        transform: rotate(-45deg);
        border-bottom: 2px solid $white;
        border-left: 2px solid $white;
      }
    }

    & ~ .feedback {
      padding-top: 10px;
      padding-left: ($CustomCheckBox-size + $check-gutter);
    }
  }
}

.radio--custom {
  &.radio--custom-light {
    input[type='radio']:checked {
      & ~ span {
        color: $white;
      }
    }

    .radio__icon {
      &::before {
        border: none;
        background: $white;
        box-shadow: 0 2px 4px 0 rgba($black, .2);
      }
    }

    span {
      color: rgba($white, .7);
      font-weight: 600;
    }
  }

  input[type='radio'] {
    & + span {
      flex: 0 0 $radio-size;
      width: $radio-size;
      height: $radio-size;
      margin-right: $check-gutter;

      &::before,
      &::after {
        border-radius: 10px;
      }

      &::before {
        top: 0;
        left: 0;
        width: $radio-size;
        height: $radio-size;
      }

      &::after {
        top: math.div($radio-size - $radio-icon-size, 2);
        left: math.div($radio-size - $radio-icon-size, 2);
        width: $radio-icon-size;
        height: $radio-icon-size;
        background-color: $white;
      }
    }
  }
}

// Toggles
.CustomCheckBox--toggle,
.radio--toggle {
  input[type='CustomCheckBox'],
  input[type='radio'] {
    &:checked {
      & + span {
        background-color: $tertiary;

        &::before {
          transform: translateX(20px);
        }
      }
    }

    & + span {
      display: block;
      position: relative;
      width: 40px;
      height: 20px;
      transition: .25s;
      border-radius: 10px;
      background-color: $gray;
      cursor: pointer;
      user-select: none;

      &::before {
        display: block;
        position: absolute;
        top: 1px;
        left: 1px;
        width: 18px;
        height: 18px;
        transition: .25s;
        border-radius: 50%;
        background-color: $white;
        box-shadow: 0 2px 4px 0 rgba($black, .2);
        content: '';
        z-index: 1;
      }
    }
  }
}

.CustomCheckBox--small-text,
.radio--small-text {
  label {
    font-size: 12px;
    font-weight: 400;
  }
}


@include media-breakpoint-down(md) {
  .form-control-sm,
  .form-control-lg {
    padding-top: .875rem;
    padding-bottom: .875rem;
  }

}

@include media-breakpoint-up(lg) {
  .form-control-sm {
    font-size: 12px;
  }

  .form-group-twoline,
  .form-group-twoline .input-group {
    > input,
    > textarea,
    > select {
      &.form-control-sm {
        & ~ label {
          height: 40px;
          padding-top: 10px;
          line-height: 20px;
        }

        &:focus,
        &.has-val {
          padding-top: 17.5px;
          padding-bottom: 2.5px;

          & ~ label {
            height: 17.5px;
            padding-top: 2.5px;
            line-height: 15px;
          }
        }
      }

      &.form-control-lg {
        & ~ label {
          height: 62px;
          padding-top: 21px;
          line-height: 20px;
        }

        &:focus,
        &.has-val {
          padding-top: 30px;
          padding-bottom: 12px;

          & ~ label {
            height: 27px;
            padding-top: 12px;
            line-height: 15px;
          }
        }
      }
    }
  }

  select {
    &.form-control-sm {
      &:not([size]):not([multiple]) {
        height: 2.625rem;
      }
    }

    &.form-control-lg {
      &:not([size]):not([multiple]) {
        height: 4rem;
      }
    }
  }
}
